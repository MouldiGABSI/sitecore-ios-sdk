<h1>Оптимизируем работу SQLite с календарем</h1>

<img title="" border="0" alt="" src="http://dl.dropbox.com/u/32947027/articles/1-SqliteCalendar/sqlite_editor_logo.png"/>  <img title="" border="0" alt="" src="http://dl.dropbox.com/u/32947027/articles/1-SqliteCalendar/hero_ical.jpg"/>

В предыдущей статье (!!!ССЫЛКА!!!) мы решили проблему некорректного использования SQLite week based calendar, написав свое расширение для этой СУБД.

Наш расчет сошелся, однако скорость его работы оставляла желать лучшего. Обработка таблицы, содержащей всего лишь 2500 записей занимала около 6 секунд. В то время как запросы, использующие strftime() исполнялись за десятые доли секунды.
<habracut text="Так чего же мы не учли?" />

Прежде чем начать, хочу отметить что здесь и далее для упрощения изложения опущена обработка ошибок и выделение некоторых классов. Прежде чем обсуждать приведенный код в комментариях, не поленитесь заглянуть на страницу проекта dodikk/ESLocale.

В первом приближении наша функция выглядела так : 
<blockquote><code><font size="2" face="Courier New" color="black"><ol><li><font color="#0000ff">void</font> ObjcFormatAnsiDateUsingLocale( sqlite3_context* ctx_, <font color="#0000ff">int</font> argc_, sqlite3_value** argv_ )</li><li>{</li><li>&nbsp;&nbsp;&nbsp;&nbsp;assert( ctx_ ); <font color="#008000">// на всякий случай </font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;@autoreleasepool <font color="#008000">// гарантируем возврат ObjC ресурсов.</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;{</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#008000">// тут могли быть ваши проверки корректности argc_, argv_</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">const</font> unsigned <font color="#0000ff">char</font>* rawFormat_ = sqlite3_value_text( argv_[0] );</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">const</font> unsigned <font color="#0000ff">char</font>* rawDate_&nbsp; = sqlite3_value_text( argv_[1] );</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">const</font> unsigned <font color="#0000ff">char</font>* rawLocaleIdentifier_ = sqlite3_value_text( argv_[2] );</li><li>&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#008000">//эта проверка необходима, дабы избежать&nbsp;crash при переводе строк в NSString</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">if</font> ( NULL == rawFormat_ || NULL == rawDate_ || NULL == rawLocaleIdentifier_ )</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sqlite3_result_error( ctx_, <font color="#A31515">"ObjcFormatAnsiDate - NULL argument passed"</font>, 3 );</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">return</font>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li><li>&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#008000">// Оборачиваем параметры в NSString</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NSString* strDate_ = [ [ NSString alloc ] initWithBytesNoCopy: (<font color="#0000ff">void</font>*)rawDate_</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; length: strlen( (<font color="#0000ff">const</font> <font color="#0000ff">char</font>*)rawDate_ )</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; encoding: NSUTF8StringEncoding</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; freeWhenDone: NO ];</li><li>&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NSString* format_ = [ [ NSString alloc ] initWithBytesNoCopy: (<font color="#0000ff">void</font>*)rawFormat_</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;length: strlen( (<font color="#0000ff">const</font> <font color="#0000ff">char</font>*)rawFormat_ )</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;encoding: NSUTF8StringEncoding</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;freeWhenDone: NO ];</li><li>&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NSString* localeIdentifier_ = [ [ NSString alloc ] initWithBytesNoCopy: (<font color="#0000ff">void</font>*)rawLocaleIdentifier_</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;length: strlen( (<font color="#0000ff">const</font> <font color="#0000ff">char</font>*)rawLocaleIdentifier_ )</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;encoding: NSUTF8StringEncoding</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;freeWhenDone: NO ];</li><li>&nbsp;</li><li>&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#008000">// для входных данных. Имеет локаль en_US_POSIX и формат даты yyyy-MM-dd</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NSDateFormatter* ansiFormatter_ = [ ESLocaleFactory ansiDateFormatter ];</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#008000">// Для форматирования результата. Имеет локаль и формат, переданный извне</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NSLocale* locale_ = [ [ NSLocale alloc ] initWithLocaleIdentifier: localeIdentifier_ ];</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NSDateFormatter* targetFormatter_ = [ ESLocaleFactory gregorianDateFormatterWithLocale: locale_ ];</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;targetFormatter_.dateFormat = format_;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#008000">// собственно, преобразование дат</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NSDate* date_ = [ ansiFormatter_ dateFromString: strDate_ ];</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NSString* result_ = [ targetFormatter_ stringFromDate: date_ ];</li><li>&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#008000">// возврат результата</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">if</font> ( nil == result_ || [ result_ isEqualToString: <font color="#A31515">@""</font> ] )</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sqlite3_result_null( ctx_ );</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">else</font> </li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sqlite3_result_text</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( </li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx_, </li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<font color="#0000ff">const</font> <font color="#0000ff">char</font>*)[ result_ cStringUsingEncoding&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: NSUTF8StringEncoding ], </li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<font color="#0000ff">int</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)[ result_ lengthOfBytesUsingEncoding: NSUTF8StringEncoding ], </li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SQLITE_TRANSIENT&nbsp;<font color="#008000">// просим SQLite сделать копию строки-результата</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li><li>&nbsp;&nbsp;&nbsp;&nbsp;}</li><li>}</li></font></ol><font size="1" color="gray">* This source code was highlighted with <a href="http://virtser.net/blog/post/source-code-highlighter.aspx"><font size="1" color="gray">Source Code Highlighter</font></a>.</font></code></blockquote>


Прогнав через profiler, мы увидели что большую часть времени занимало не форматирование текста, но создание экземпляров NSDateFormatter (line 39..45).

Модель использования данной функции предполагает смену локали и формата только между запросами. В рамках одного запроса эти параметры скорее всего меняться не будут. Это наводит нас на простую идею оптимизации.


Ресурсозатратные NSDateFormatter мы поместим в некий Singletone объект. Тогда блок форматирования будет иметь следующий вид :
<blockquote><code><font size="2" face="Courier New" color="black"><ol><li>SqlitePersistentDateFormatter* fmt_ = [ SqlitePersistentDateFormatter instance ]; <font color="#008000">// создаем singletone</font></li><li>NSString* result_ = nil;</li><li>@synchronized( fmt_ ) <font color="#008000">// форматирование должно быть атомарным и потокобезопасным</font></li><li>{</li><li>&nbsp; <font color="#008000">// обновляем формат и локаль при необходимости</font></li><li>&nbsp; [ fmt_ setFormat: format_</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; locale: localeIdentifier_ ];</li><li>&nbsp; </li><li>&nbsp; <font color="#008000">// форматируем результат</font></li><li>&nbsp; result_ = [ fmt_ getFormattedDate: strDate_ ];</li><li>}</li></font></ol><font size="1" color="gray">* This source code was highlighted with <a href="http://virtser.net/blog/post/source-code-highlighter.aspx"><font size="1" color="gray">Source Code Highlighter</font></a>.</font></code></blockquote>


А теперь пришло время заглянуть под капот. Реализацию потокобезопасного singletone опустим как классическую задачу. В остатке получим следующее : 
<blockquote><code><font size="2" face="Courier New" color="black"><ol><li>@implementation SqlitePersistentDateFormatter</li><li>{</li><li>@<font color="#0000ff">private</font> <font color="#008000">// наши тяжелые объекты</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;NSDateFormatter* ansiFormatter&nbsp;;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;NSDateFormatter* targetFormatter;</li><li>}</li><li>&nbsp;</li><li><font color="#008000">// ansiFormatter не меняется, поскольку он стандартный</font></li><li><font color="#008000">// потому создадим его внутри init.</font></li><li>-(id)init</li><li>{</li><li>&nbsp;&nbsp;&nbsp;&nbsp;self = [ super init ];</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">if</font> ( nil == self )</li><li>&nbsp;&nbsp;&nbsp;&nbsp;{</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">return</font> nil;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;}</li><li>&nbsp;&nbsp;&nbsp;&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;self-&#62;ansiFormatter = [ ESLocaleFactory ansiDateFormatter ];</li><li>&nbsp;&nbsp;&nbsp;&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">return</font> self;</li><li>}</li><li>&nbsp;</li><li>&nbsp;</li><li><font color="#008000">// самое интересное тут</font></li><li>-(BOOL)setFormat:( NSString* )dateFormat_</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;locale:( NSString* )locale_</li><li>{</li><li>&nbsp;&nbsp;&nbsp;&nbsp;NSParameterAssert( nil != locale_ );</li><li>&nbsp;&nbsp;&nbsp;&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;BOOL isNoFormatter_ = ( nil == self-&#62;targetFormatter );</li><li>&nbsp;&nbsp;&nbsp;&nbsp;BOOL isOtherLocale_ = ![ self-&#62;targetFormatter.locale.localeIdentifier isEqualToString: locale_ ];</li><li>&nbsp;&nbsp;&nbsp;&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#008000">// создаем новый NSDateFormatter только если локаль поменялась</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">if</font> ( isNoFormatter_ || isOtherLocale_ )</li><li>&nbsp;&nbsp;&nbsp;&nbsp;{</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NSCalendar* cal_ = [ ESLocaleFactory gregorianCalendarWithLocaleId: locale_ ];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self-&#62;targetFormatter = [ NSDateFormatter <font color="#0000ff">new</font> ];</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ ESLocaleFactory setCalendar: cal_ </li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; forDateFormatter: self-&#62;targetFormatter ];&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;}</li><li>&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#008000">// выставляем дату&nbsp;&nbsp;&nbsp;&nbsp; </font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;self-&#62;targetFormatter.dateFormat = dateFormat_;</li><li>&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">return</font> YES;</li><li>}</li><li>&nbsp;</li><li>&nbsp;</li><li><font color="#008000">// основную работу уже сделали. </font></li><li><font color="#008000">// Осталось лишь применить заготовленные NSDateFormatter</font></li><li>-(NSString*)getFormattedDate:( NSString* )strDate_;</li><li>{</li><li>&nbsp;&nbsp;&nbsp;&nbsp;NSDate*&nbsp; date_&nbsp; = [ self-&#62;ansiFormatter&nbsp; dateFromString: strDate_ ];</li><li>&nbsp;&nbsp;&nbsp;&nbsp;NSString* result_ = [ self-&#62;targetFormatter stringFromDate: date_&nbsp;&nbsp;&nbsp;&nbsp;];</li><li>&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">return</font> result_;</li><li>}</li></font></ol><font size="1" color="gray">* This source code was highlighted with <a href="http://virtser.net/blog/post/source-code-highlighter.aspx"><font size="1" color="gray">Source Code Highlighter</font></a>.</font></code></blockquote>



Итак, мы получили потокобезопасную, почти чистую в терминах ФП функцию ( pure function ), которая работает за время, сравнимое с strftime.
Полную версию кода вы сможете найти на <a title="" href="https://github.com/dodikk/ESLocale">github</a>

